
<p id="notice"><%= notice %></p>

<div class="row">
    <div class="span8">
        <form class="well well-height">
          <div id="menu_left"><h1><%= @food_truck.truck_name %></h1></div>
          <div id="phone_number"><%= number_to_phone(@food_truck.phone) %></div>
          <br>
          <img src="/assets/truck.png" class="img-rounded">    
          <br><br>
          <%= render 'item_table' %>   
       </form>
    </div> 

    <!-- **************************************************************************** -->
    <!-- This is the order summary table. --> 
    <!-- **************************************************************************** -->    
    <div class="span4">
        <form class="well well-height" id="well_pink">
          <h4>Order Summary</h4> <br>
          <table id="order_table" class="table table-condensed">
            <tr>
              <th>Item</th>
              <th>Price</th>
              <th>Quantity</th>
            </tr>

            <% if has_order? %>
                <% current_order.order_items.each do |order_item| %>
                <tr>
                  <td><%= order_item.item.name if !order_item.item.nil? %></td>
                  <td>$<%= number_with_precision(order_item.price, :precision => 2) %></td>
                  <td><%= order_item.quantity %></td>
                  <td><%= link_to 'x', order_item, method: :delete, data: { confirm: 'Are you sure?' }, :remote => true %></td>
                </tr>
              <% end %>
            <% end %>
          </table>
          <button class="btn btn-inverse">Place Order</button>    
        </form> 
    </div>
</div>

<!-- **************************************************************************** -->
<!-- Modal dialog div. --> 
<!-- **************************************************************************** -->    

<div class="modal" id="modal_item_create" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="display: none">
  <div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">Ã—</button>
    <h3 id="myModalLabel">Add to Order</h3>
  </div>

  <%= form_for(@order_item, :remote => true, :html => {:'data-type' => 'json'}) do |f| %>
    <div class="modal-body">
        <% if @order_item.errors.any? %>
        <div id="error_explanation">
        <h2><%= pluralize(@item.errors.count, "error") %> prohibited this item from being saved:</h2>

        <ul>
        <% @order.errors.full_messages.each do |msg| %>
          <li><%= msg %></li>
        <% end %>
        </ul>
        </div>
        <% end %>

        <div class="field">
          <%= f.hidden_field :item_id%>
        </div>


        <h4 id="food_name_placeholder"></h4>
        <div id="description_placeholder"></div></br>

        <div class="field">
          <label class="order_label">Price:</label>
          <%= f.text_field :price,:readonly => true, :class =>"input-mini" %>
        </div>
        <div class="field">
          <label class="order_label">Qty:</label> 
          <%= f.number_field :quantity, :value => 1, :class => "input-mini" %>
        </div>
        <div class="field">
          Notes or special instructions: <br />
          <%= f.text_area :note, :cols => "50", :class => "form_text_area"  %>
        </div>

        <%= hidden_field_tag :food_truck_id%>

    </div>
    <div class="modal-footer">
      <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
      <button class="btn btn-primary" id="save_btn">Save changes</button>
    </div>
  <% end %>
</div>


<h1> Backbone Testing </h1>

<div id="notice"></div>
<div id="app"></div>

<script>
  function addItemToOrder(price, id, description, name) 
  {    
    var price = $('#order_item_price').val(price.html().replace("$",""));
    var orderItemId = $('#order_item_item_id').val(id.val());
    var foodItruckId = $('#food_truck_id').val(<%= params['id'] %>); 
    var description = $('#description_placeholder').html(description.html());
    var foodName = $('#food_name_placeholder').html(name.html());

  }

  (function($){

    /**********************************
    MODEL 
    **********************************/
    var OrderItem = Backbone.Model.extend({
      urlRoot : "/order_items",
      defaults: {
        item_id: '81',
        price: '3',
        quantity: '1',
        note: 'testing backbone'
      }
    });

    /**********************************
    Collection
    **********************************/
    var List = Backbone.Collection.extend({
      model: OrderItem
    });

    /**********************************
    Item View 
    **********************************/
    var OrderItemView = Backbone.View.extend({
      tagName: 'tr', // name of (orphan) root tag in this.el. 
      initialize: function() 
      {
        _.bindAll(this, 'render', 'unrender', 'remove'); 
        this.model.bind('change', this.render); 
        this.model.bind('remove', this.unrender); 
      },

      events: {
        'click td.delete': 'remove'
      },

      render: function() 
      {
        $(this.el).html('<td>' + this.model.get('name') + '</td><td> '  + this.model.get('price')+ '</td><td>' + this.model.get('quantity') + '</td><td class="delete"> [x]</td>');

        return this; // for chainable calls, like .render().el
      },

      unrender: function() 
      {
        $(this.el).remove();
      },

      remove: function() 
      {
        this.model.destroy(); 
      }

    });

    /**********************************
    List View
    **********************************/
    var ListView = Backbone.View.extend({    
      el: $('#app'), // attaches `this.el` to an existing element.


      events: {
        'click button#add': 'addOrderItem',
        'ajax:success': 'postAddOrder'
      },

      postAddOrder: function() 
      {
        alert('onyong');
      },

      // `initialize()`: Automatically called upon instantiation. Where you make all types of bindings, _excluding_ UI events, such as clicks, etc.
      initialize: function(){
        _.bindAll(this, 'render', 'addOrderItem', 'appendOrderItem'); 
         
        this.collection = new List();
        this.collection.bind('add', this.appendOrderItem); //whenever add is called on the list, append is called to update view. 

         this.counter = 0; 
         this.render(); // not all views are self-rendering. This one is.
      },
      // `render()`: Function in charge of rendering the entire view in `this.el`. Needs to be manually called by the user.
      render: function(){
        $(this.el).append("<button id='add'>Add list order item</button>");
        $(this.el).append("<table><tbody>");
        $(this.el).append("<td></td>");
        $(this.el).append("</tbody></table>");
        _(this.collection.models).each(function(item){
          self.appendItem(item);
        }, this);
      },

      addOrderItem: function() { 
        var orderitem = new OrderItem(); 
        orderitem.save(); 
        this.collection.add(orderitem); // add item to collection. view is updated because of the binding of 'add' in initialize.
        },

      appendOrderItem: function(orderItem) {
        var orderItemView = new OrderItemView({
          model: orderItem
        });
        $('tbody', this.el).append(orderItemView.render().el);
        }
      });

    
    function initialize()
    {
      var listView = new ListView(); 

      $('body').append($('#modal_item_create'));
      $(".new_order_item").bind("ajax:success", 
        function(xhr, data, status) 
        {

          var oi = new OrderItem( data['item'] );

          listView.appendOrderItem(oi);


          $('#modal_item_create').modal('hide');  
        });

      // **listView instance**: Instantiate main app view.

    }


    initialize(); 

  })(jQuery);

</script>

